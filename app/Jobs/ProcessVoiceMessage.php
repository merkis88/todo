<?php

namespace App\Jobs;

use App\Models\Section;
use App\Services\DeepSeekService;
use App\Services\Speech\SpeechToTextService;
use App\Services\Tasks\AddService;
use DefStudio\Telegraph\Keyboard\Button;
use DefStudio\Telegraph\Keyboard\Keyboard;
use DefStudio\Telegraph\Models\TelegraphChat;
use Illuminate\Bus\Queueable;
use Illuminate\Contracts\Queue\ShouldQueue;
use Illuminate\Foundation\Bus\Dispatchable;
use Illuminate\Queue\InteractsWithQueue;
use Illuminate\Queue\SerializesModels;
use Illuminate\Support\Facades\Http;
use Illuminate\Support\Facades\Log;
use Illuminate\Support\Facades\Storage;

class ProcessVoiceMessage implements ShouldQueue
{
    use Dispatchable, InteractsWithQueue, Queueable, SerializesModels;

    public int $tries = 1;
    public int $timeout = 120;
    protected string $fileId;
    protected int $chatId;

    public function __construct(string $fileId, int $chatId)
    {
        $this->fileId = $fileId;
        $this->chatId = $chatId;
    }

    public function handle(SpeechToTextService $speechService, DeepSeekService $deepSeekService, AddService $addService): void
    {
        $chat = TelegraphChat::find($this->chatId);
        if (!$chat) {
            return;
        }

        $tempOggPath = null;
        $tempWavPath = null;
        $rawDeepSeekResponse = '';

        try {
            $fileUrl = $this->getTelegramFileUrl($this->fileId);
            $fileContent = Http::get($fileUrl)->body();
            $tempOggPath = storage_path('app/voices/' . $this->fileId . '.ogg');
            Storage::disk('local')->put('voices/' . $this->fileId . '.ogg', $fileContent);

            $recognizedText = $speechService->recognize($tempOggPath);
            $tempWavPath = str_replace('.ogg', '.wav', $tempOggPath);

            if (empty($recognizedText)) {
                $chat->message("–ù–µ —Å–º–æ–≥ —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ä–µ—á—å –≤ –≤–∞—à–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏. ü§´")->send();
                return;
            }

            $sections = Section::where('telegraph_chat_id', $this->chatId)->pluck('name')->toArray();
            $sectionsList = !empty($sections) ? '"' . implode('", "', $sections) . '"' : '–ù–µ—Ç';

            $prompt = <<<PROMPT
            –¢—ã - —É–º–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∑–∞–¥–∞—á. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–∫–∞–∑–∞–ª: "{$recognizedText}". –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —ç—Ç–æ—Ç —Ç–µ–∫—Å—Ç –∏ –≤—ã–ø–æ–ª–Ω–∏ —Å–ª–µ–¥—É—é—â–∏–µ –¥–µ–π—Å—Ç–≤–∏—è:
            1. –ò–∑–≤–ª–µ–∫–∏ —Å—É—Ç—å –∑–∞–¥–∞—á–∏. –°—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π –∫—Ä–∞—Ç–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è —ç—Ç–æ–π –∑–∞–¥–∞—á–∏.
            2. –ü–æ—Å–º–æ—Ç—Ä–∏ –Ω–∞ —Å–ø–∏—Å–æ–∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ä–∞–∑–¥–µ–ª–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: [{$sectionsList}].
            3. –û–ø—Ä–µ–¥–µ–ª–∏, –∫–∞–∫–æ–π –∏–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ä–∞–∑–¥–µ–ª–æ–≤ –ª—É—á—à–µ –≤—Å–µ–≥–æ –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è —ç—Ç–æ–π –∑–∞–¥–∞—á–∏.
            4. –ï—Å–ª–∏ –Ω–∏ –æ–¥–∏–Ω —Ä–∞–∑–¥–µ–ª –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç, –ø—Ä–µ–¥–ª–æ–∂–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –Ω–æ–≤–æ–≥–æ, –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ —Ä–∞–∑–¥–µ–ª–∞.
            –í–µ—Ä–Ω–∏ –æ—Ç–≤–µ—Ç –¢–û–õ–¨–ö–û –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON, –±–µ–∑ –∫–∞–∫–∏—Ö-–ª–∏–±–æ –¥—Ä—É–≥–∏—Ö —Å–ª–æ–≤ –∏ –ø–æ—è—Å–Ω–µ–Ω–∏–π. –°—Ç—Ä—É–∫—Ç—É—Ä–∞ JSON –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Å–ª–µ–¥—É—é—â–µ–π:
            {
              "task_title": "–ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏",
              "action": "add_to_existing_section" | "suggest_new_section",
              "section_name": "–ù–∞–∑–≤–∞–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∏–ª–∏ –Ω–æ–≤–æ–≥–æ —Ä–∞–∑–¥–µ–ª–∞"
            }
            PROMPT;

            $rawDeepSeekResponse = $deepSeekService->ask($prompt);

            if (preg_match('/\{.*\}/s', $rawDeepSeekResponse, $matches)) {
                $jsonResponse = $matches[0]; // –ó–∞–±–∏—Ä–∞–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–π —á–∏—Å—Ç—ã–π JSON
            } else {
                throw new \Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ JSON –≤ –æ—Ç–≤–µ—Ç–µ DeepSeek.");
            }

            $data = json_decode($jsonResponse, true, 512, JSON_THROW_ON_ERROR);

            $taskTitle = $data['task_title'] ?? null;
            $action = $data['action'] ?? null;
            $sectionName = $data['section_name'] ?? null;

            if (!$taskTitle || !$action || !$sectionName) {
                throw new \Exception("DeepSeek –æ—Ç–¥–∞–ª –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π JSON");
            }

            if ($action === 'add_to_existing_section') {
                $section = Section::where('telegraph_chat_id', $this->chatId)
                    ->where('name', $sectionName)
                    ->first();

                if ($section) {
                    $addService->handle($taskTitle, $chat, $section->id);
                } else {
                    $chat->message("ü§î –ò–ò-–∞–≥–µ–Ω—Ç –ø—Ä–µ–¥–ª–æ–∂–∏–ª –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É '{$taskTitle}' –≤ —Ä–∞–∑–¥–µ–ª '{$sectionName}', –Ω–æ —è –µ–≥–æ –Ω–µ –Ω–∞—à–µ–ª. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –≤—Ä—É—á–Ω—É—é.")->send();
                }

            } elseif ($action === 'suggest_new_section') {
                $keyboard = Keyboard::make()->buttons([
                    Button::make("‚úÖ –°–æ–∑–¥–∞—Ç—å —Ä–∞–∑–¥–µ–ª –∏ –¥–æ–±–∞–≤–∏—Ç—å")
                        ->action('confirm_add_task_with_new_section')
                        ->param('task_title', $taskTitle)
                        ->param('section_name', $sectionName),
                    Button::make("‚úçÔ∏è –î–æ–±–∞–≤–∏—Ç—å –≤—Ä—É—á–Ω—É—é")
                        ->action('add_task_mode'),
                ]);

                $chat->message("–Ø –¥—É–º–∞—é, –∑–∞–¥–∞—á–∞ '{$taskTitle}' –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –∫ –Ω–æ–≤–æ–º—É —Ä–∞–∑–¥–µ–ª—É '{$sectionName}'. –ß—Ç–æ –¥–µ–ª–∞–µ–º?")
                    ->keyboard($keyboard)
                    ->send();
            }

        } catch (\Throwable $e) {
            Log::error("[JOB FAILED] –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥–æ–ª–æ—Å–∞.", [
                'error' => $e->getMessage(),
                'deepseek_raw_response' => $rawDeepSeekResponse
            ]);
            $chat->message("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è. üò•")->send();
        } finally {
            if ($tempOggPath && file_exists($tempOggPath)) {
                unlink($tempOggPath);
            }
            if ($tempWavPath && file_exists($tempWavPath)) {
                unlink($tempWavPath);
            }
        }
    }

    private function getTelegramFileUrl(string $fileId): string
    {
        $token = config('telegraph.bot_token') ?? config('telegraph.bots.default.token');
        $response = Http::get("https://api.telegram.org/bot{$token}/getFile", ['file_id' => $fileId]);

        if (!$response->successful() || !$response->json('ok')) {
            throw new \Exception('Telegram API: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ. ' . $response->body());
        }

        $filePath = $response->json('result.file_path');
        return "https://api.telegram.org/file/bot{$token}/{$filePath}";
    }
}
