<?php

namespace App\Services\Tasks;

use App\Models\Task;
use DefStudio\Telegraph\Models\TelegraphChat;
use Carbon\Carbon;

class RemindService
{
    public function handle(int $id, string $delay, TelegraphChat $chat): void
    {
        $task = Task::where('id', $id)
            ->where('telegraph_chat_id', $chat->id)
            ->first();

        try {
            $remindAt = $this->parseDelay($delay);
        } catch (\Exception $e) {
            $chat->message("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ü—Ä–∏–º–µ—Ä—ã: '—á–µ—Ä–µ–∑ 10 –º–∏–Ω—É—Ç', '–∑–∞–≤—Ç—Ä–∞ –≤ 12:00', '—á–µ—Ä–µ–∑ 2 —á–∞—Å–∞'")->send();
            return;
        }

        $task->remind_at = $remindAt;
        $task->save();

        $chat->message("üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ " . $remindAt->format('H:i d.m.Y'))->send();
    }

    private function parseDelay(string $delay): Carbon
    {
        $delay = mb_strtolower(trim($delay));

        $patterns = [

            '/—á–µ—Ä–µ–∑\s+(\d+)\s+–º–∏–Ω—É—Ç/' => function($matches) {
                return now()->addMinutes((int)$matches[1]);
            },

            '/—á–µ—Ä–µ–∑\s+(\d+)\s+—á–∞—Å/' => function($matches) {
                return now()->addHours((int)$matches[1]);
            },

            '/—á–µ—Ä–µ–∑\s+(\d+)\s+–¥–Ω/' => function($matches) {
                return now()->addDays((int)$matches[1]);
            },

            '/–∑–∞–≤—Ç—Ä–∞\s+–≤\s+(\d{1,2}):(\d{2})/' => function($matches) {
                return now()->addDay()->setTime((int)$matches[1], (int)$matches[2]);
            },

            '/—Å–µ–≥–æ–¥–Ω—è\s+–≤\s+(\d{1,2}):(\d{2})/' => function($matches) {
                return now()->setTime((int)$matches[1], (int)$matches[2]);
            },
        ];

        foreach ($patterns as $pattern => $callback) {
            if (preg_match($pattern, $delay, $matches)) {
                return $callback($matches);
            }
        }

        try {
            $englishDelay = str_replace([
                '–º–∏–Ω—É—Ç', '–º–∏–Ω—É—Ç—ã', '–º–∏–Ω—É—Ç–∞',
                '—á–∞—Å–æ–≤', '—á–∞—Å–∞', '—á–∞—Å',
                '–¥–Ω–µ–π', '–¥–Ω—è', '–¥–µ–Ω—å'
            ], [
                'minutes', 'minutes', 'minute',
                'hours', 'hours', 'hour',
                'days', 'days', 'day'
            ], $delay);

            return now()->add(\Carbon\CarbonInterval::make($englishDelay));
        } catch (\Exception $e) {
            throw new \Exception("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –≤—Ä–µ–º—è: {$delay}");
        }
    }
}
