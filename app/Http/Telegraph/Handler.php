<?php

namespace App\Http\Telegraph;

use App\Models\Task;
use App\Services\OpenAIService;
use Illuminate\Support\Stringable;
use Illuminate\Support\Facades\Log;
use DefStudio\Telegraph\Models\TelegraphBot;
use DefStudio\Telegraph\Models\TelegraphChat;
use DefStudio\Telegraph\Handlers\WebhookHandler;

class Handler extends WebhookHandler
{

    public function handleCommand(Stringable $text): void
    {
        $input = trim($text->toString());

        if (empty($input)) {
            $this->chat->message("–ö–æ–º–∞–Ω–¥–∞ –ø—É—Å—Ç–∞")->send();
            return;
        }

        [$command, $args] = $this->parseCommand($text);
        $command = ltrim($command, '/');
        Log::info('Parsed command', ['command' => $command, 'arguments' => $args]);

        match ($command) {
            'start' =>$this->startChat(),
            'add' => $this->addTask($args ?? ''),
            'list' => $this->listTasks(),
            'delete' => $this->deleteTask($args ?? ''),
            'done' => $this->doneTask($args ?? ''),
            'edit' =>$this->editTask($args ?? ''),
            'ask' =>$this->askGPT($args ?? ''),
            default => $this->chat->message("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞")->send(),
        };
    }

    public function startChat(): void
    {
        $this->chat->message("–ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π TODO-–±–æ—Ç ü§ñ\n–ù–∞–ø–∏—à–∏ /add <–∑–∞–¥–∞—á–∞> —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É.\n–ù–∞–ø–∏—à–∏ /list —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫.\n–ù–∞–ø–∏—à–∏ /delete <id> —á—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É.")->send();
    }

    protected function addTask(string $title): void
    {
        if (empty(trim($title))) {
            $this->chat->message("–ù–µ–ª—å–∑—è —Å–æ–∑–¥–∞—Ç—å –ø—É—Å—Ç—É—é –∑–∞–¥–∞—á—É!")->send();
            return;
        }

        Task::create(['title' => $title]);
        $this->chat->message("–ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞: $title")->send();
    }

    protected function listTasks(): void
    {
        $tasks = Task::all();

        if ($tasks->isEmpty()) {
            $this->chat->message("–°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –ø—É—Å—Ç.")->send();
            return;
        }

        $message = "üìù –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á:\n";
        foreach ($tasks as $task) {
            $status = $task->is_done ? '‚úÖ' : '‚è≥';
            $message .= "{$task->id}. {$task->title} {$status}\n";

        }

        $this->chat->message($message)->send();
    }

    protected function deleteTask(string $id): void
    {
        $task = Task::find($id);
        if (!$task) {
            $this->chat->message("–ó–∞–¥–∞—á–∞ —Å ‚Ññ {$id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")->send();
            return;
        }

        $task->delete();
        $this->chat->message("–ó–∞–¥–∞—á–∞ ‚Ññ {$id} —É–¥–∞–ª–µ–Ω–∞.")->send();
    }

    protected function doneTask(string $id): void
    {
        $task = Task::find($id);

        if (!$task) {
            $this->chat->message("–ó–∞–¥–∞—á–∞ —Å ‚Ññ {$id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")->send();
            return;
        }

        $task->is_done = true;
        $task->save();

        $this->chat->message("–ó–∞–¥–∞—á–∞ ‚Ññ {$id} –æ—Ç–º–µ—á–µ–Ω–∞ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–∞—è ‚úÖ")->send();
    }

    protected function editTask(string $args): void
    {
        $parts = explode(' ', $args, 2);

        if (count($parts) < 2) {
            $this->chat->message("üü• –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –≤–≤–µ–ª–∏ –Ω–µ —Ç–æ—Ç –Ω–æ–º–µ—Ä, –ª–∏–±–æ –Ω–µ –≤–≤–µ–ª–∏ –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É")->send();
            return;
        }

        [$id, $newTitile] = $parts;

        $task = Task::find($id);
        if (!$task) {
            $this->chat->message("üü• –ó–∞–¥—á–∞ ‚Ññ {$id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")->send();
            return;
        }

        $task->title = $newTitile;
        $task->save();
        $this->chat->message("üü© –ó–∞–¥–∞—á–∞ ‚Ññ {$id} —É—Å–ø–µ—à–Ω–∞ –∏–∑–º–µ–Ω–Ω–∞")->send();
    }


    protected function handleChatMessage(Stringable $text): void
    {
        $this->chat->action('typing')->send();

        $gpt = new OpenAIService();
        $response = $gpt->ask($text->toString());

        $this->chat->message($response)->send();
    }

    protected function askGPT()
    {

    }
}

